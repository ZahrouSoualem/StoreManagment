/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Home;

import java.sql.*;
import java.sql.Date ;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author DELL
 */
public class SELLING extends javax.swing.JPanel {

    /**
     * Creates new form SELLENG
     */
    DefaultTableModel ct = new DefaultTableModel();
    Statement stt ;
    ResultSet rs,rs2,rs3;
    Connecter cnn = new Connecter();
    private int SlectedRow;
    String ndate,idc,idp;
    int nqte;
    public SELLING() {
        initComponents();
         ct = (DefaultTableModel)(SellingTable.getModel());
        try{
            stt = cnn.obtenirconnexion().createStatement();
            rs = stt.executeQuery("select client.`noClient` as idcli ,client.name_cli,selling.`idProduct` as idpro ,product.nom_pro,selling_date,quantity_sold\n" +
                                  "from selling \n" +
                                  "INNER JOIN client on selling.`noClient` = client.`noClient`\n" +
                                  "INNER JOIN product on selling.`idProduct` = product.`idProduct`;");
           while(rs.next()){
                ct.addRow(new Object [] {rs.getInt("idcli"),rs.getString("name_cli"),rs.getInt("idpro"),rs.getString("nom_pro")
                        ,rs.getDate("selling_date"),rs.getInt("quantity_sold")});
           }
           rs2 = stt.executeQuery("SELECT * FROM client");
           while(rs2.next()){
               String noclient = rs2.getString("noClient");
              clientcomb.addItem(noclient);
           }
           rs3 = stt.executeQuery("SELECT * FROM product");
           while(rs3.next()){
               String noproduct = rs3.getString("idProduct");
              productcomb.addItem(noproduct);
           }
        }catch(Exception e){
            System.err.print(e);
        }
        SellingTable.setModel(ct);
 }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        SellingTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        clientcomb = new javax.swing.JComboBox<>();
        productcomb = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        date = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        quantity = new javax.swing.JTextField();
        search = new javax.swing.JButton();
        tsearch = new javax.swing.JTextField();
        ADD = new javax.swing.JButton();
        EDIT = new javax.swing.JButton();

        setBackground(new java.awt.Color(247, 250, 250));

        SellingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "idClient", "Client Name", "idProduct", "Product Name", "Date", "Quantity"
            }
        ));
        SellingTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        SellingTable.getTableHeader().setReorderingAllowed(false);
        SellingTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SellingTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(SellingTable);

        jLabel1.setText("ID CLIENT");

        clientcomb.setModel(new javax.swing.DefaultComboBoxModel<>());

        productcomb.setModel(new javax.swing.DefaultComboBoxModel<>());

        jLabel2.setText("PRODUCT REFERENCE");

        jLabel3.setText("DATE(yyyy-MM-dd)");

        date.setEnabled(false);

        jLabel4.setText("QUANTITY");

        search.setText("Search");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        ADD.setText("ADD");
        ADD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ADDActionPerformed(evt);
            }
        });

        EDIT.setText("EDIT");
        EDIT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EDITActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(clientcomb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(productcomb, 0, 183, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(date)
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(quantity))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ADD, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(EDIT, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                        .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(228, 228, 228))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clientcomb, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(productcomb, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ADD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(EDIT, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(62, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchActionPerformed

    private void ADDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ADDActionPerformed
        // TODO add your handling code here:
          try{
        
        int client = Integer.parseInt(clientcomb.getSelectedItem().toString()) ;
        int product = Integer.parseInt(productcomb.getSelectedItem().toString()) ; 
        int quantitysold =Integer.parseInt(quantity.getText());
        int qte= 0;
        java.util.Date tdate = new java.util.Date();
        java.sql.Date sqlDate=new java.sql.Date(tdate.getTime());
        
        rs =stt.executeQuery("SELECT * FROM product WHERE idProduct= '" + product + "'");
        while(rs.next()){
            qte = Integer.parseInt(rs.getString("quantity"));
        }
        int sum ;
        sum = qte - quantitysold;
        /*test for amount of the product*/
        if( sum >= 0  ){
        stt.executeUpdate("INSERT INTO selling(idProduct, noClient, selling_date,quantity_sold)"
                + " VALUES ('"+product+"','"+client+"','"+sqlDate+"','"+quantitysold+"')");
        /* mind the quantity that we have sold from the quantity that we have in the stock */
        
        stt.executeUpdate("UPDATE product SET  quantity='" + sum
                 + "' WHERE idProduct ='" + product + "'");
        /*----------------------------------------------------------------------------------*/
        JOptionPane.showMessageDialog(null, "You have sold Correctlly");
        }else{
        JOptionPane.showMessageDialog(null, "You Can not Sold more than what you have ");
        }

        refresh();
        
        }
        catch(Exception  e){
        JOptionPane.showMessageDialog(null, "error "+e.getLocalizedMessage());
        }
    }//GEN-LAST:event_ADDActionPerformed

    private void SellingTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SellingTableMouseClicked
        // TODO add your handling code here:
        SlectedRow = SellingTable.getSelectedRow();
        date.setEnabled(true);
        deplace(SlectedRow);
        ndate = date.getText();
        idc = clientcomb.getSelectedItem().toString() ;
        idp = productcomb.getSelectedItem().toString() ;
        nqte=Integer.parseInt(quantity.getText());
    }//GEN-LAST:event_SellingTableMouseClicked

    private void EDITActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EDITActionPerformed
        // TODO add your handling code here:
        try{
        int product = Integer.parseInt(productcomb.getSelectedItem().toString()) ;
        int quantitysold =Integer.parseInt(quantity.getText());
        int qte=0;
        if(JOptionPane.showConfirmDialog(null, "confirm modfification", "modification",JOptionPane.YES_NO_OPTION )== JOptionPane.OK_OPTION ){
        rs =stt.executeQuery("SELECT * FROM product WHERE idProduct= '" + idp + "'");
        while(rs.next()){
            qte = Integer.parseInt(rs.getString("quantity"));
        }
        int sum ;
        sum = qte + nqte;
        sum = sum - quantitysold;
        if(sum >= 0){
            stt.executeUpdate("UPDATE selling SET quantity_sold='" + Integer.parseInt(quantity.getText()) +
                                            "' ,noClient='" + clientcomb.getSelectedItem().toString()                             +
                                            "' ,idProduct ='" + productcomb.getSelectedItem().toString()  +
                                            "' ,selling_date ='" + Date.valueOf(date.getText()) +
                           /*Where Clause*/ "' WHERE idProduct='" + idp +
                                            "' AND noClient='" + idc + "' "
                                            + "AND  selling_date ='" + Date.valueOf(ndate) + "'");
        
        /* mind the quantity that we have sold from the quantity that we have in the stock */
        
        stt.executeUpdate("UPDATE product SET  quantity='" + sum
                 + "' WHERE idProduct ='" + product + "'");
        /*----------------------------------------------------------------------------------*/
        JOptionPane.showMessageDialog(null, "You have sold Correctlly");
        }else{
        JOptionPane.showMessageDialog(null, "You Can not Sold more than what you have ");   
        }
        
        refresh();
        }
        }
        catch(Exception e)
        {
        System.err.print(e);
        JOptionPane.showMessageDialog(null, "erroo"+e.getLocalizedMessage());
        }
    }//GEN-LAST:event_EDITActionPerformed

    public void vider(){
            int n = ct.getRowCount();
        for(int i=0;i<n;i++){
            ct.removeRow(0);
        }
     }
    public void refresh(){
        vider();
        try{
            stt = cnn.obtenirconnexion().createStatement();
            rs = stt.executeQuery("select client.`noClient` as idcli ,client.name_cli,selling.`idProduct` as idpro ,product.nom_pro,selling_date,quantity_sold\n" +
                                  "from selling \n" +
                                  "INNER JOIN client on selling.`noClient` = client.`noClient`\n" +
                                  "INNER JOIN product on selling.`idProduct` = product.`idProduct`;");
           while(rs.next()){
                ct.addRow(new Object [] {rs.getInt("idcli"),rs.getString("name_cli"),rs.getInt("idpro"),rs.getString("nom_pro")
                        ,rs.getDate("selling_date"),rs.getInt("quantity_sold")});
           }
        clientcomb.setSelectedIndex(0);
        productcomb.setSelectedIndex(0);
        date.setText("");
        quantity.setText("");
        }catch(Exception e){
            System.err.print(e);
        }
        SellingTable.setModel(ct);
    }
    public void deplace(int i){
    try{
    
    clientcomb.setSelectedItem(ct.getValueAt(i, 0).toString()); 
    productcomb.setSelectedItem(ct.getValueAt(i, 2).toString());
    date.setText(ct.getValueAt(i, 4).toString());
    quantity.setText(ct.getValueAt(i, 5).toString());
    }catch(Exception e){
        JOptionPane.showMessageDialog(null, "erroo"+e.getLocalizedMessage());
    }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ADD;
    private javax.swing.JButton EDIT;
    private javax.swing.JTable SellingTable;
    private javax.swing.JComboBox<String> clientcomb;
    private javax.swing.JTextField date;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> productcomb;
    private javax.swing.JTextField quantity;
    private javax.swing.JButton search;
    private javax.swing.JTextField tsearch;
    // End of variables declaration//GEN-END:variables
}
