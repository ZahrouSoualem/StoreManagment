/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Home;

import java.sql.Date;
import java.sql.ResultSet;
import java.sql.Statement;
import java.time.LocalDate;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author DELL
 */
public class SellingDetails extends javax.swing.JPanel {

    /**
     * Creates new form sellingdetails
     */
    Statement stt ;
    ResultSet rs , rs1 , rs2 ,rs3,rs4,rss , rss1 ;
    Connecter cnn = new Connecter();
    private int SlectedRow;
    int idp,idc;
    Date ndate ;
    int nqte;
    
    DefaultTableModel ct = new DefaultTableModel();
    public SellingDetails(int idDelivery) {
        initComponents();
        ct = (DefaultTableModel)(OrderedTable.getModel());
        try{
             
            stt = cnn.obtenirconnexion().createStatement() ; 
            rs = stt.executeQuery(" SELECT * from sellingdetails,product where sellingdetails.idProduct = product.idProduct AND id_selling = "+idDelivery+" ");
            
           
           while(rs.next()){
               
                ct.addRow(new Object [] {rs.getInt("id_selling"),rs.getInt("idProduct") , rs.getString("nom_pro") ,rs.getInt("quantity"),rs.getDouble("price")}) ;
           }
             rs1 = stt.executeQuery("SELECT * FROM product");
           while(rs1.next()){
               String noproduct = rs1.getString("idProduct");
              productcomb.addItem(noproduct);
           }
            rs3 = stt.executeQuery("SELECT * FROM sellingg where id_selling = "+idDelivery+" ")  ;
           while(rs3.next()){
               String noProvider = rs3.getString("noClient") ; 
              Clientcomb.addItem(noProvider) ; 
              
           }
             rs4 = stt.executeQuery("SELECT * FROM sellingg where id_selling = "+idDelivery+" ") ;
           while(rs4.next()){
               Date dat = rs4.getDate("date") ; 
               date.setText(""+dat);
              
              
              
           }
           String query3 = "SELECT SUM( product.price_pro*sellingdetails.quantity ) AS total\n" +
"                              FROM sellingdetails,product\n" +
"                              WHERE sellingdetails.idProduct = product.idProduct \n" +
"                              AND`id_selling` = "+idDelivery+" " ;
           rs2=stt.executeQuery(query3);
           while(rs2.next()){
                 Total.setText(""+rs2.getInt("total")+"  DA");
             }
           idsell.setText(""+idDelivery);
           
        }catch(Exception e){
             JOptionPane.showMessageDialog(null, "erroo"+e.getLocalizedMessage());
        }
        OrderedTable.setModel(ct);
     
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        OrderedTable = new javax.swing.JTable();
        idsell = new javax.swing.JTextField();
        productcomb = new javax.swing.JComboBox<>();
        quantity = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        ADD = new javax.swing.JButton();
        EDIT = new javax.swing.JButton();
        DELETE = new javax.swing.JButton();
        Total = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        Clientcomb = new javax.swing.JComboBox<>();
        date = new javax.swing.JTextField();
        livraison = new javax.swing.JButton();

        setBackground(new java.awt.Color(247, 250, 250));

        OrderedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Vente", "ID Product", "Product Name", "Quantity", "Price"
            }
        ));
        OrderedTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OrderedTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(OrderedTable);

        idsell.setEnabled(false);

        jLabel1.setText("id Delivery");

        jLabel2.setText("id Product");

        jLabel3.setText("Quantity");

        ADD.setText("ADD");
        ADD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ADDActionPerformed(evt);
            }
        });

        EDIT.setText("EDIT");
        EDIT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EDITActionPerformed(evt);
            }
        });

        DELETE.setText("DELETE");
        DELETE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DELETEActionPerformed(evt);
            }
        });

        jLabel4.setText("Total  :");

        date.setEnabled(false);

        livraison.setText("DELIVERY");
        livraison.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                livraisonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(productcomb, 0, 142, Short.MAX_VALUE)
                        .addComponent(idsell)
                        .addComponent(quantity))
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Clientcomb, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(Total, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(ADD)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(EDIT)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DELETE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(livraison))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 665, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(81, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Total, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Clientcomb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ADD)
                    .addComponent(EDIT)
                    .addComponent(DELETE)
                    .addComponent(livraison))
                .addGap(63, 63, 63))
            .addGroup(layout.createSequentialGroup()
                .addGap(170, 170, 170)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(idsell, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(productcomb, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void OrderedTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OrderedTableMouseClicked
        
        SlectedRow = OrderedTable.getSelectedRow();
        deplace(SlectedRow);
        
        idp = Integer.valueOf(productcomb.getSelectedItem().toString()) ;
        ndate = Date.valueOf(date.getText());;
        idc = Integer.valueOf(Clientcomb.getSelectedItem().toString()) ;
        nqte=Integer.parseInt(quantity.getText());
       
       
    }//GEN-LAST:event_OrderedTableMouseClicked

    private void ADDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ADDActionPerformed
 try{
        
        //int client = Integer.parseInt(Clientcomb.getSelectedItem().toString()) ;
        int product = Integer.parseInt(productcomb.getSelectedItem().toString()) ; 
        int quantitysold =Integer.parseInt(quantity.getText());
        int qte= 0;
       int id_selling = Integer.parseInt(idsell.getText()) ;
       java.sql.Date dat = Date.valueOf(date.getText());
       
        
        rs =stt.executeQuery("SELECT * FROM product WHERE idProduct= '" + product + "'");
        while(rs.next()){
            qte = Integer.parseInt(rs.getString("quantity"));
        }
        int sum ;
        sum = qte - quantitysold;
        /*test for amount of the product*/
        if( sum >= 0  ){
        //stt.executeUpdate("INSERT INTO sellingdetails(ID_SellinfidProduct,quantity_sold)"
          //      + " VALUES ('"+product+"','"+client+"','"+sqlDate+"','"+quantitysold+"')");
          stt.executeUpdate("INSERT INTO `sellingdetails`(`quantity`, `idProduct`, `id_selling` , `date`) VALUES ("+quantitysold+ "," +product+","+id_selling+", ' "+dat+" ' )") ; 
        /* mind the quantity that we have sold from the quantity that we have in the stock */
        
        stt.executeUpdate("UPDATE product SET  quantity='" + sum
                 + "' WHERE idProduct ='" + product + "'");
        /*----------------------------------------------------------------------------------*/
        JOptionPane.showMessageDialog(null, "You have sold Correctlly");
        }else{
        JOptionPane.showMessageDialog(null, "You Can not Sold more than what you have ");
        }

        refresh();
        
        }
        catch(Exception  e){
        JOptionPane.showMessageDialog(null, "error "+e.getLocalizedMessage());
        }
    }//GEN-LAST:event_ADDActionPerformed

    private void EDITActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EDITActionPerformed
     try{
        int product = Integer.parseInt(productcomb.getSelectedItem().toString()) ;
        int quantitysold =Integer.parseInt(quantity.getText());
        int qte=0;
        if(JOptionPane.showConfirmDialog(null, "confirm modfification", "modification",JOptionPane.YES_NO_OPTION )== JOptionPane.OK_OPTION ){
        rs =stt.executeQuery("SELECT * FROM product WHERE idProduct= '" + idp + "'");
        while(rs.next()){
            qte = Integer.parseInt(rs.getString("quantity"));
        }
        int sum ;
        sum = qte + nqte;
        sum = sum - quantitysold;
        if(sum >= 0){
             String query = "UPDATE sellingdetails SET idProduct=" + productcomb.getSelectedItem().toString() + " , quantity= "
                    + Integer.valueOf(quantity.getText()) + " WHERE `idProduct`= "+idp+" AND ID_Selling = "+Integer.valueOf(idsell.getText()) +"";
                stt.executeUpdate(query);
        
        /* mind the quantity that we have sold from the quantity that we have in the stock */
        
        stt.executeUpdate("UPDATE product SET  quantity='" + sum
                 + "' WHERE idProduct ='" + product + "'");
        /*----------------------------------------------------------------------------------*/
        JOptionPane.showMessageDialog(null, "You have sold Correctlly");
        }else{
        JOptionPane.showMessageDialog(null, "You Can not Sold more than what you have ");   
        }
        
        refresh();
        }
        }
        catch(Exception e)
        {
        System.err.print(e);
        JOptionPane.showMessageDialog(null, "erroo"+e.getLocalizedMessage());
        }
    }//GEN-LAST:event_EDITActionPerformed

    private void DELETEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DELETEActionPerformed
try
        {
             int qtef = 0 ;
            if(JOptionPane.showConfirmDialog(null, "Do you really want to delete that ligne de commande ?", "DELET", JOptionPane.YES_NO_OPTION)==JOptionPane.OK_OPTION)
            {
                if(idsell.getText().length() != 0){
                    stt.executeUpdate("DELETE FROM sellingdetails WHERE id_selling ='" + idsell.getText() + "' AND idProduct = "+productcomb.getSelectedItem().toString()+" AND quantity = "+Integer.valueOf(quantity.getText()+""));
                     int qte = Integer.valueOf(quantity.getText());
                     rss1 = stt.executeQuery("SELECT * FROM selling WHERE idProduct = '" + idp + "'  AND noClient = '"+idc+" 'AND selling_date = '"+ndate+" ' ");
                     while(rss1.next()){
                     qtef = Integer.parseInt(rss1.getString("quantity_sold"));
                      }
                    int quant = qtef - qte ; 
                    stt.executeUpdate("UPDATE selling SET quantity_sold='" +quant +
                                            "' ,noClient='" + Clientcomb.getSelectedItem().toString()                             +
                                            "' ,idProduct ='" + productcomb.getSelectedItem().toString()  +
                                            "' ,selling_date ='" + Date.valueOf(date.getText()) +
                                            "' WHERE idProduct='" + idp +
                                            "' AND noClient='" + idc + "' "
                                            + "AND  selling_date ='" + ndate+ "'");

                }else{
                    JOptionPane.showMessageDialog(null, "No ID");
                }
            }
            
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "erroo"+e.getLocalizedMessage());
        }
       refresh();
        
    }//GEN-LAST:event_DELETEActionPerformed

    private void livraisonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_livraisonActionPerformed
        // TODO add your handling code here:
          try{
            int idselling = Integer.valueOf(idsell.getText()) ;
       java.util.Date tdate = new java.util.Date();
        java.sql.Date sqlDate=new java.sql.Date(tdate.getTime());
        
        
        String query = "INSERT INTO `delivery`(`id_selling`) VALUES ("+idselling+")";
        stt.executeUpdate(query);
        
        JOptionPane.showMessageDialog(null, "The Delivery has been added Correctlly");
        
        refresh();
        }
        catch(Exception  e){
        JOptionPane.showMessageDialog(null, "error "+e.getLocalizedMessage());
        }
       
    }//GEN-LAST:event_livraisonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ADD;
    private javax.swing.JComboBox<String> Clientcomb;
    private javax.swing.JButton DELETE;
    private javax.swing.JButton EDIT;
    private javax.swing.JTable OrderedTable;
    private javax.swing.JTextField Total;
    private javax.swing.JTextField date;
    private javax.swing.JTextField idsell;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton livraison;
    private javax.swing.JComboBox<String> productcomb;
    private javax.swing.JTextField quantity;
    // End of variables declaration//GEN-END:variables

private void refresh() {
         vider();
        try{
            
            int id = Integer.valueOf(idsell.getText()) ;
          stt = cnn.obtenirconnexion().createStatement();
              rs = stt.executeQuery(" SELECT * from sellingdetails,product where sellingdetails.idProduct = product.idProduct AND id_selling = "+id+" ");
                                  
           
           while(rs.next()){
               
                ct.addRow(new Object [] {rs.getInt("id_selling"),rs.getInt("idProduct") , rs.getString("nom_pro") ,rs.getInt("quantity")}) ;
           }
           quantity.setText("");
           productcomb.setSelectedIndex(0);
        
        }catch(Exception e){
            System.err.print(e);
        }
        OrderedTable.setModel(ct);
    }

   public void vider(){
            int n = ct.getRowCount();
        for(int i=0;i<n;i++){
            ct.removeRow(0);
        }
     }
    public void deplace(int i){
    try{
    idsell.setText(ct.getValueAt(i, 0).toString());
    productcomb.setSelectedItem(ct.getValueAt(i, 1).toString()); 
    quantity.setText(ct.getValueAt(i, 3).toString());
    
   
    }catch(Exception e){
        JOptionPane.showMessageDialog(null, "erroo"+e.getLocalizedMessage());
    }
}
}
